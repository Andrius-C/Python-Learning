def index_equals_str(input_lst,index,input_str):
    if input_lst[index] == input_str:
        return True
    else:
        return False
def counter(input_lst,header_row = False):
    num_elt = 0
    if header_row == True:
        input_lst = input_lst[1:len(input_lst)]
    for each in input_lst:
        num_elt = num_elt + 1
    return num_elt
def feature_counter(input_lst,index, input_str, header_row = False):
    num_elt=0
    if header_row == True:
        input_lst = input_lst[1:len(input_lst)]
    for each in input_lst:
        if each[index] == input_str:
            num_elt=num_elt+1
    return num_elt




def feature_counter(input_lst,index, input_str, header_row = False):
    num_elt = 0
    if header_row == True:
        input_lst = input_lst[1:len(input_lst)]
    for each in input_lst:
        if each[index] == input_str:
            num_elt = num_elt + 1
    return num_elt

def summary_statistics(input_lst):
    num_japan_films=feature_counter(input_lst,6,"Japan",True)
    num_color_films=feature_counter(input_lst,2,"Color",True)
    num_films_in_english=feature_counter(input_lst,5,"English",True)
    
    summary_dict={"japan_films":num_japan_films, "color_films":num_color_films,
                  "films_in_english":num_films_in_english}
    return summary_dict

summary=summary_statistics(movie_data)
print(summary)



# Working with Classes 

class Dataset:
    def __init__(self, data):
        self.header = data[0]
        self.data = data[1:]
    
    def __str(self):
        datastring=self.data[:10]
        return str(datastring)
    
    def column(self, label):
        if label not in self.header:
            return None
        
        index = 0
        for idx, element in enumerate(self.header):
            if label == element:
                index = idx
        
        column = []
        for row in self.data:
            column.append(row[index])
        return column
    
        
    def count_unique(self, label):
        unique_results = set(self.column(label))
        count = len(unique_results)
        return count

nfl_dataset = Dataset(nfl_data)



# Using Try exception to convert years to integers

for row in legislators:
    
        year=row[2]
        birth_year=year.split("-")[0]
        try:
            birth_year=int(birth_year)
        except Exception:
            birth_year=0
        
        row.append(birth_year)
    

# Populating empty strings with last value

last_value=1
for row in legislators:
    if row[7]==0:
        row[7]=last_value
    last_value=row[7]

# List Comprehensions 

apple_prices = [100, 101, 102, 105]
apple_prices_doubled=[price*2 for price in apple_prices]
apple_prices_lowered = [price-100 for price in apple_prices]


# Checking for max value 

values = [-50, -80, -100]
max_value = None
for i in values:
    if max_value is None or i > max_value:
        max_value = i
        
# List comprehension and .items()

top_female_names=[]
for key in name_counts:
    if name_counts[key] == 2:
        top_female_names.append(key)
        
        
top_female_names = []
top_female_names = [k for k, v in name_counts.items() if v == 2]
